plugins {
    id 'java'
}

group = 'cn.zju'
version = '2.1.1-rc26'

sourceCompatibility = 1.8

def static getOsString() {
    String vendor = System.getProperty("java.vendor");
    if ("The Android Project" == vendor) {
        return "android";
    } else {
        String osName = System.getProperty("os.name");
        osName = osName.toLowerCase(Locale.ENGLISH);
        if (osName.startsWith("windows")) {
            return "windows";
        } else if (osName.startsWith("mac os")) {
            return "apple";
        } else if (osName.startsWith("linux")) {
            return "linux";
        } else if (osName.startsWith("sun")) {
            return "sun"
        }
        return "unknown"
    }
}

def static getArchString() {
    String osArch = System.getProperty("os.arch");
    osArch = osArch.toLowerCase(Locale.ENGLISH);
    if ("i386" == osArch || "x86" == osArch || "i686" == osArch) {
        return "x86";
    } else if (osArch.startsWith("amd64") || osArch.startsWith("x86_64")) {
        return "x86_64";
    } else if (osArch.startsWith("arm64")) {
        return "arm64";
    } else if (osArch.startsWith("arm")) {
        return "arm";
    } else if ("ppc" == osArch || "powerpc" == osArch) {
        return "ppc";
    } else if (osArch.startsWith("ppc")) {
        return "ppc_64";
    } else if (osArch.startsWith("sparc")) {
        return "sparc";
    } else if (osArch.startsWith("mips64")) {
        return "mips64";
    } else if (osArch.startsWith("mips")) {
        return "mips";
    } else if (osArch.contains("risc")) {
        return "risc";
    }
    return "unknown";
}

// 1.中心库
repositories {
//    maven { url "http://repository.jboss.org/nexus/content/groups/public" }
//    maven { url "http://maven.oschina.net/content/groups/public" }
    mavenCentral()
}

// 2.依赖库
dependencies {
    // Add your other dependencies here:

    // JCuda dependencies are below

    def classifier = getOsString() + "-" + getArchString()

    // Set JCuda version here, or if multiple modules use JCuda,
    // you should set a global variable like so:
    //
    // ext {
    //  jCudaVersion = "0.9.2"
    // }
    //
    // In your *top level* build gradle, and use
    // rootProject.ext.jCudaVersion instead of jCudaVersion when you need to access it

    def jCudaVersion = "0.9.2"

    // JCuda Java libraries

    compile(group: 'org.jcuda', name: 'jcuda', version: jCudaVersion) {
        transitive = false
    }
    compile(group: 'org.jcuda', name: 'jcublas', version: jCudaVersion) {
        transitive = false
    }
    compile(group: 'org.jcuda', name: 'jcufft', version: jCudaVersion) {
        transitive = false
    }
    compile(group: 'org.jcuda', name: 'jcusparse', version: jCudaVersion) {
        transitive = false
    }
    compile(group: 'org.jcuda', name: 'jcurand', version: jCudaVersion) {
        transitive = false
    }

    // JCuda native libraries

    compile group: 'org.jcuda', name: 'jcuda-natives',
            classifier: classifier, version: jCudaVersion
    compile group: 'org.jcuda', name: 'jcublas-natives',
            classifier: classifier, version: jCudaVersion
    compile group: 'org.jcuda', name: 'jcufft-natives',
            classifier: classifier, version: jCudaVersion
    compile group: 'org.jcuda', name: 'jcusparse-natives',
            classifier: classifier, version: jCudaVersion
    compile group: 'org.jcuda', name: 'jcurand-natives',
            classifier: classifier, version: jCudaVersion

    compile "colt:colt:1.2.0"
    compile "org.jgrapht:jgrapht-core:1.0.0"
    compile "nz.ac.waikato.cms.weka:weka-stable:3.8.0"
    compile "log4j:log4j:1.2.17"
    testCompile "junit:junit:4.12"
    //compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    //testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    // https://mvnrepository.com/artifact/org.tinyjee.jgraphx/jgraphx
    compile group: 'org.tinyjee.jgraphx', name: 'jgraphx', version: '3.4.1.3'

    compile group: 'gov.nist.math', name: 'jama', version: '1.0.3'
    compile group: 'net.sourceforge.javacsv', name: 'javacsv', version: '2.0'
    compile group: 'org.apache.poi', name: 'poi', version: '3.15'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.0'
    compile files('lib/cplex.jar')
}

// 3. 编码设置
tasks.withType(Javadoc) { options.encoding = "UTF-8" }
tasks.withType(JavaCompile) { options.encoding = "UTF-8" }

// 4. 发布设置
apply plugin: 'maven-publish'
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            credentials { username 'admin'; password 'admin19881109' }
            url "http://dsp.sgool.cn:8887/nexus/content/repositories/releases"
        }
    }
}